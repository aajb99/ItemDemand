step_date(date, features = 'doy') %>%
step_date(date, features = 'month') %>%
step_date(date, features = 'year') %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 10, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n) %>%
pull(mean)
baked_data1
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
baked_data1
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 10, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
bestTune
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==1, item==2) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 10, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==4, item==7) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 10, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n) %>%
pull(mean)
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n) %>%
pull(mean)
bestTune
collect_metrics(CV_results)
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config = bestTune$.config) %>%
pull(mean)
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==4, item==7) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem <- data_train %>%
filter(store==9, item==36) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==36) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==36) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
storeItem <- data_train %>%
filter(store==9, item==36) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==35) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==38) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==39) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==40) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==37) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==36) %>%
select(date, sales)
rFormula <- sales ~ .
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
storeItem <- data_train %>%
filter(store==9, item==36) %>%
select(date, sales)
rFormula <- sales ~ date
storeItem_recipe <- recipe(rFormula, data = storeItem) %>% # set model formula and dataset
step_date(date, features = c('dow', 'doy', 'week', 'month', 'year', 'decimal')) %>%
step_holiday(date) %>%
step_range(date_doy, min = 0, max = pi) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy))
prepped_recipe <- prep(storeItem_recipe) # preprocessing new data
baked_data1 <- bake(prepped_recipe, new_data = storeItem)
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 800) %>% #Type of model
set_engine('ranger') %>%
set_mode('regression')
pretune_workflow <- workflow() %>%
add_recipe(storeItem_recipe) %>%
add_model(rf_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(mtry(range = c(1,ncol(storeItem)-1)),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# Split data for CV
folds <- vfold_cv(storeItem, v = 5, repeats = 1)
# Run CV
CV_results <- pretune_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(smape))
bestTune <- CV_results %>%
select_best('smape')
collect_metrics(CV_results) %>%
filter(mtry == bestTune$mtry, min_n == bestTune$min_n, .config == bestTune$.config) %>%
pull(mean)
